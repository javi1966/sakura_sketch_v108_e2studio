/*******************************************************************************
* GR-SAKURA LIBRARY LICENSE.  LIMITATION and DISCLAIMER of WARRANTY
*
* This software is supplied by Tokushu Denshi Kairo Inc. and is only intended 
* for use with Gadget Renesas projects. No other uses are authorized.
* This software is owned by Tokuden and is protected under all applicable laws,
* including copyright laws. Disclosure or redistribution to others this headder
* file and related library file alone is not allowed.
* You can redistribute the executable object file (only SREC or BIN file) which
* is generated as a result of compilation and link your program.
* Of cource the limitation of this library license does not effect to your code.
* THIS SOFTWARE IS PROVIDED "AS IS" AND TOKUDEN MAKES NO WARRANTIES REGARDING
* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT
* LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
* AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
* Tokuden reserves the right, without notice, to make changes to this software
* and to discontinue the availability of this software. By using this software,
* you agree to the additional terms and conditions found by accessing the
* http://rx.tokudenkairo.co.jp/
* (C) Copyright 2011-2012 Tokushu Denshi Kairo Inc.
*******************************************************************************/

#ifndef	__H_RXDUINO_SDMMC
#define	__H_RXDUINO_SDMMC
/**************************************************************************//**
 * @file     sdmmc.h
 * @brief    Arduino互換のSDライブラリを定義するヘッダファイル。<BR>
             詳細は SDMMC クラスと File クラスの説明を参照。
 ******************************************************************************/

#include "rxduino.h"

#ifdef __cplusplus
	extern "C" {
#endif

#define SDMMC_LIBRARY_VERSION 0x01080000 // Version 1.08
#define SDMMC_LIBRARY_TIME    1380466335 // 2013/09/29 23:52:15 

#define FILE_BUFFER_SIZE 512
#define FILENAME_SIZE 256

#define FILE_READ  0x01
#define FILE_WRITE 0x02

typedef int FILE_MODE;

class SDMMC;

/*********************************************************************//**
 * @class   File
 * @brief   ファイルを扱うためのクラス
 * @note    このファイルのオブジェクトは、 SDMMC::open() か File::openNextFile() によって返されるものを使うこと。ユーザプログラムが作成しないこと。
 **********************************************************************/
class File
{
private:
	unsigned char rbuf[FILE_BUFFER_SIZE];
	int rbuf_rptr;
	int rbuf_datacount;
	bool eof;
	int rpos;

	char wbuf[FILE_BUFFER_SIZE];

	bool readbuf(); // ファイルからメモリ上のバッファへ読み込む

	void *handle;
	int filesize;
	char filename[FILENAME_SIZE];
	bool isdir;
	SDMMC *parent; 
	size_t print_number(unsigned long val,int base);

public:
/*********************************************************************//**
 * @brief       ファイルを閉じる
 * @warning     ファイルオブジェクトを使い終わるときに、最後に必ず呼び出すこと！
 * @return      なし
 **********************************************************************/
	void close();

/*********************************************************************//**
 * @brief       読み出せるデータがあるかどうか調べる
 * @return      データがればtrueを返す。なければfalseを返す。
 **********************************************************************/
	bool available();

/*********************************************************************//**
 * @brief       ファイルから1バイト読み込む
 * @return      データがあればそのデータ(0x00～0xff)を返す。ファイルの終わりに達していたら-1を返す。
 **********************************************************************/
	int read();

/*********************************************************************//**
 * @brief       ファイルに1バイト書き込む
 * @param       c 書き込みたいデータ
 * @return      実際に出力した文字数
 **********************************************************************/
	size_t write(unsigned char c);

/*********************************************************************//**
 * @brief       ファイルに文字列を書き込む
 * @param       str 書き込みたい文字列
 * @return      実際に出力した文字数
 **********************************************************************/
	size_t write(const char *str);

/*********************************************************************//**
 * @brief       ファイルにバイナリデータを書き込む
 * @param[in]   buf 書き込みデータが格納されたバッファ
 * @param       len 書き込みたい長さ
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t write(unsigned char *buf,int len);

/*********************************************************************//**
 * @brief       未書き込みのデータをファイルに書き込む
 * @return      なし
 **********************************************************************/
	void flush();

/*********************************************************************//**
 * @brief       ファイルから読み出すデータの先頭の1バイトを覗き見る。ファイルの読み出しポインタには影響を与えない。
 * @param       この関数は実装されていない
 * @return      文字コード(0～255)。
 **********************************************************************/
	unsigned char peek();

/*********************************************************************//**
 * @brief       ファイルからの読み出し位置を取得する
 * @return      ファイルの先頭から数えた読み出し位置 (バイト単位)
 **********************************************************************/
	unsigned long position();

/*********************************************************************//**
 * @brief       ファイルからの読み出し位置を移動する
 * @param       pos ファイルの先頭から数えた読み出し位置 (バイト単位)
 * @return      成功したらtrueを返す。失敗したらfalseを返す。
 **********************************************************************/
	bool seek(unsigned long pos);

/*********************************************************************//**
 * @brief       ファイルに文字列を書き込む
 * @param[in]   str 書き込みたい文字列
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(const char str[]);

/*********************************************************************//**
 * @brief       ファイルに文字を書き込む
 * @param[in]   c 書き込みたい文字コード
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(const char c);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込む
 * @param[in]   c 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(unsigned char c, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(int val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
4 **********************************************************************/
	size_t print(unsigned int val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(long val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(unsigned long val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに浮動小数点数を書き込む
 * @param[in]   val 書き込みたい数値
 * @param fpdigit 桁数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t print(double val, int fpdigit=2);

/*********************************************************************//**
 * @brief       ファイルに文字列を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   str 書き込みたい文字列
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(const char *str);

/*********************************************************************//**
 * @brief       ファイルに文字を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   c 書き込みたい文字コード
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(const char c);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   c 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(unsigned char c, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(int val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(unsigned int val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(long val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに数値を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   val 書き込みたい数値
 * @param print_type 基数
 * 	       - 2:  二進数
 * 	       - 8:  8進数
 * 	       - 10: 10進数 (デフォルト)
 * 	       - 16: 16進数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(unsigned long val, int print_type=DEC);

/*********************************************************************//**
 * @brief       ファイルに浮動小数点数を書き込み、改行コード(\\n\\r)を書き込む
 * @param[in]   val 書き込みたい数値
 * @param fpdigit 桁数
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(double val, int fpdigit=2);

/*********************************************************************//**
 * @brief       改行コードのみ出力する
 * @param       なし
 * @return      実際に出力したバイト数
 **********************************************************************/
	size_t println(void);

/*********************************************************************//**
 * @brief       ファイルのサイズを調べる
 * @return      ファイルのサイズ(バイト単位)
 **********************************************************************/
	unsigned long size();

/*********************************************************************//**
 * @brief       開いているファイルの名前を調べる
 * @details     この関数はディレクトリ検索の結果として使うとよい。ファイル名は8.3形式。
 * @warning     この関数が返す文字列はライブラリがメモリを確保し、管理しているため、ユーザプログラムではfreeしてはならない。
 * @return      ファイル名を表す文字列
 **********************************************************************/
	char *name();

/*********************************************************************//**
 * @brief       開いているファイルオブジェクトが、ファイルか、ディレクトリかを調べる
 * @return      ディレクトリならばtrueを返す。ファイルならばfalseを返す。
 **********************************************************************/
	bool isDirectory();

/*********************************************************************//**
 * @brief       ディレクトリオブジェクトの場合、次のファイルオブジェクトを返す
 * @return      次に該当するファイルオブジェクト。該当がなければfalseとして評価されるファイルオブジェクトを返す。
 **********************************************************************/
	File openNextFile();

/*********************************************************************//**
 * @brief       ディレクトリの検索を最初に戻す
 * @return      なし
 **********************************************************************/
	void rewindDirectory();

	// 以下の関数やメンバ変数には、ユーザは操作しないこと
	File(void *handle,int size,const char *name,bool isdir,SDMMC *parent);
	operator int() {if(!handle) return 0; return 1;}
	operator bool() {if(!handle) return false; return true;}
	
};

/*********************************************************************//**
 * @class   SDMMC
 * @brief   SDカードやMMCカードを操作する
 * @details MMC(Multi Media Card)やSDを利用するためのクラスです。このクラスを使うにはリンカオプションに -lsdmmc を追加してください。
 * @note    ArduinoではSDという名前のクラスだったが、その名前を使うと問題がある。ここでは汎用的なMMCカードと、そのMMCの特異的な実装の一例である一部のカードについてアクセスするためのライブラリとするため、SDMMCという名称になっている。いわゆる大人の事情である。
 **********************************************************************/
class SDMMC 
{
private:
	void *sdmmc_handle;

public:
/*********************************************************************//**
 * @brief       ライブラリのバージョン情報を取得する
 * @param[out]  vi 拡張情報が必要ならばversion_info構造体へのポインタを与える。<BR>
 *              構造体の各フィールドがセットされて戻る。各フィールドは文字列へのポインタだが、<BR>
 *              static constな文字列を指すので、ユーザプログラムでfreeしてはならない。<BR>
 *              拡張情報が不要ならばNULLを指定してもよい
 * @return      バージョン番号を1バイトずつ詰めた16進数で返す
 *              例えば、バージョン1.00ならば、0x01000000を返す
 *              バージョン1.23ならば0x010203となる。
 *              メジャーバージョン.マイナーバージョン.サブバージョン.デバッグバージョン
 **********************************************************************/
	static unsigned long getVersion(version_info *vi);

	SDMMC();

/*********************************************************************//**
 * @brief    メモリカードを使用するためにライブラリを初期化する
 * @details  CSピンは標準の端子が使われる
 * @warning  SPIライブラリと一緒に使うときには、SPI::begin() よりも後に呼び出さなければならない
 * @return   なし
 **********************************************************************/
	void begin();

/*********************************************************************//**
 * @brief    メモリカードを使用するためにライブラリを初期化する
 * @details  CSピンの位置を任意のピンに割り当てられる
 * @param    cspin CSピンのピン番号
 * @warning  SPIライブラリと一緒に使うときには、SPI::begin() よりも後に呼び出さなければならない
 * @return   なし
 **********************************************************************/
	void begin(int cspin);

/*********************************************************************//**
 * @brief    カードの挿入状態をライブラリに支持する
 * @details  カードの挿入状態はP15で判別しているが、そうでない場合、この関数で与えることができる
 * @param    ins 0:未挿入 1:挿入
 * @return   なし
 **********************************************************************/
	void insert(bool ins);

/*********************************************************************//**
 * @brief    目的のファイルが存在するかどうか調べる
 * @param    filename 調べたいファイル名
 * @return   - ファイルが存在していればtrueを返す。
 *           - ファイル存在しないかカードが検出されていなければfalseを返す
 **********************************************************************/
	bool exists(const char *filename);

/*********************************************************************//**
 * @brief    ディレクトリを作成する
 * @param    pathname 作成したいディレクトリのパス
 * @return   - 成功したらtrueを返す。
 *           - 失敗したらfalseを返す
 **********************************************************************/
	bool mkdir(const char *pathname);

/*********************************************************************//**
 * @brief    指定されたファイルを開く
 * @param    filename オープンしたいファイル名
 * @param    mode FILE_MODE 型の定数。
 *            - FILE_READ : ファイルを読み出し用に開く(デフォルト)
 *            - FILE_WRITE : ファイルを書き込み用に開く
 * @return   - 成功したらファイルオブジェクトを返す。
 *           - 失敗したらfalseを返す。具体的にはfalseとして評価される特殊なファイルオブジェクトを返す。
 **********************************************************************/
	File open(const char *filename, FILE_MODE mode = FILE_READ);

/*********************************************************************//**
 * @brief    指定されたファイルを削除する
 * @param    filename 削除したいファイル名
 * @return   - 成功したらtrueを返す。
 *           - 失敗したらfalseを返す
 **********************************************************************/
	bool remove(const char *filename);

/*********************************************************************//**
 * @brief    ファイル名を変更する
 * @param    oldname 旧ファイル名
 * @param    newname 新ファイル名
 * @return   - 成功したらtrueを返す。
 *           - 失敗したらfalseを返す
 **********************************************************************/
	bool rename(const char *oldname, const char *newname);

/*********************************************************************//**
 * @brief    ディレクトリを削除する
 * @param    pathname 削除したいディレクトリ
 * @return   - 成功したらtrueを返す。
 *           - 失敗したらfalseを返す
 **********************************************************************/
	bool rmdir(const char *pathname);
};

#ifdef __cplusplus
	}
#endif

#endif
